apply plugin: 'java'
apply plugin: 'kotlin'

buildscript {
  ext.kotlin_version = '1.8.0'
  ext.jackson_version = '2.14.1'

  repositories {
    maven { url = "https://cache-redirector.jetbrains.com/maven-central" }
    maven { url = "https://cache-redirector.jetbrains.com/intellij-dependencies" }
    maven { url = "https://intellij-nightly-sdk.s3.eu-west-1.amazonaws.com" }
  }

  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
  }
}

sourceSets {
  test.kotlin.srcDirs += 'testSrc'
  test.resources {
    srcDirs "testResources"
    includes = ["**/*.*"]
  }
}

repositories {
  maven { url = "https://cache-redirector.jetbrains.com/maven-central" }
  maven { url = "https://cache-redirector.jetbrains.com/intellij-dependencies" }

  maven { url = "https://www.jetbrains.com/intellij-repository/releases" }
  maven { url = "https://www.jetbrains.com/intellij-repository/snapshots" }

  // This one will only work on https://intellij-plugins-performance.teamcity.com/ (locally you will get access denied, even in JB network)
  maven { url = "https://intellij-nightly-sdk.s3.eu-west-1.amazonaws.com" }

  // To debug build from gradle locally - uncomment this line and comment the line above
  //  maven { url = "https://www.jetbrains.com/intellij-repository/nightly" }

  maven { url = "https://cache-redirector.jetbrains.com/packages.jetbrains.team/maven/p/grazi/grazie-platform-public" }
}

dependencies {
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:1.6.4"
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:1.6.4"
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
  implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
  implementation "org.jetbrains.intellij.deps:gradle-api:7.4"
  implementation "org.kodein.di:kodein-di-jvm:7.16.0"

  implementation 'com.jetbrains.intellij.tools:ide-performance-testing-commands-squashed:LATEST-TRUNK-SNAPSHOT'

  testImplementation 'com.jetbrains.intellij.tools:ide-starter-squashed:LATEST-TRUNK-SNAPSHOT'
  testImplementation 'com.jetbrains.intellij.tools:ide-starter-junit5-squashed:LATEST-TRUNK-SNAPSHOT'

  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.1'
  testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.9.1'
  testImplementation 'org.junit.jupiter:junit-jupiter-params:5.9.1'
  testImplementation 'org.junit.vintage:junit-vintage-engine:5.9.1'
  testImplementation 'org.junit.platform:junit-platform-launcher:1.9.1'

  testImplementation 'io.kotest:kotest-assertions-core-jvm:5.5.4'
  testImplementation "com.fasterxml.jackson.core:jackson-databind:$jackson_version"
  testImplementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jackson_version"
  testImplementation 'org.apache.httpcomponents:httpclient:4.5.14'
}

configurations {
  implementation.exclude(group: 'io.ktor')
  implementation.exclude(group: 'com.jetbrains.infra')
  implementation.exclude(group: 'com.jetbrains.intellij.remoteDev')
}

compileKotlin {
  sourceCompatibility = JavaVersion.VERSION_17
  targetCompatibility = JavaVersion.VERSION_17

  kotlinOptions {
    jvmTarget = JavaVersion.VERSION_17.toString()
    freeCompilerArgs += [
      "-version",
      "-Xjvm-default=enable",
      "-Xopt-in=kotlin.time.ExperimentalTime"
    ]
  }
}

compileTestKotlin {
  sourceCompatibility = JavaVersion.VERSION_17
  targetCompatibility = JavaVersion.VERSION_17

  kotlinOptions {
    jvmTarget = JavaVersion.VERSION_17.toString()
    freeCompilerArgs += [
      "-version",
      "-Xjvm-default=enable",
      "-Xopt-in=kotlin.time.ExperimentalTime"
    ]
  }
}


test {
  useJUnitPlatform()

  testLogging {
    events "passed", "skipped", "failed", "standardOut", "standardError"
  }
}

